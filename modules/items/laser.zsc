class UaS_LaserLightModule : HDPickup {
	int mode;
	bool activated;
	UaS_LLM_Emitter emitter;
	vector3 oldsc;

	default {
		Inventory.Amount 1;
		Inventory.MaxAmount 1;
		Inventory.PickupMessage "Picked up a combo laser/light module.";
		Inventory.Icon "CLIPA0";
		HDPickup.Bulk 5;
		HDPickup.refid UAS_HDLD_LASERLIGHT;
		tag "Light/Laser module";
	}

	void ToggleSwitch() { activated = !activated; }
	void ModeSwitch(int direct = -1) {
		if (direct >= 0) { mode = direct; }
		else { mode = (mode + 1) % 3; }
	}

	override bool Use(bool pickup) {
		if (owner.player.cmd.buttons & BT_USE) {
			ModeSwitch();
			return false;
		}
		ToggleSwitch();
		return false;
	}

	override void DoEffect() {
		if(activated) {
			if (!emitter) { emitter = UaS_LLM_Emitter(actor.spawn("UaS_LLM_Emitter", owner.pos, false)); }
			UpdateEmitter();
			switch (mode) {
				case 0: //Flashlight
					Light(true);
					Laser(false);
					break;
				case 1: //Laser
					Light(false);
					Laser(true);
					break;
				case 2: //Both
					Light(true);
					Laser(true);
					break;
			}
		}
		else if (emitter) { emitter.destroy(); }
	}

	void UpdateEmitter() {
		vector3 newpos;
		double newangle, newpitch;
		if (owner is "HDPlayerPawn") {
			HDPlayerPawn p = HDPlayerPawn(owner);
			actor sc = p.scopecamera;
			newpos = owner.vec3Angle(
				12 * cos(-sc.pitch) + 4 * sin(-sc.pitch),
				sc.angle,
				(12 * sin(-sc.pitch)) + (owner.player.viewz - owner.pos.z) - 4);
			newpos.z = min(
				newpos.z,
				owner.pos.z + HDWeapon(HDPlayerPawn(owner).player.readyweapon).GetShootOffset(owner));
			newangle = sc.angle;
			newpitch = sc.pitch;
		}
		else {
			newpos = owner.vec3Angle(
				8 * cos(-owner.pitch) + 4 * sin(-owner.pitch),
				owner.angle,
				(8 * sin(-owner.pitch)) + (owner.height * 0.75));
			newangle = owner.angle;
			newpitch = owner.pitch;
		}
		emitter.setOrigin(newpos, true);
		emitter.A_SetAngle(newangle, true);
		emitter.A_SetPitch(newpitch, true);
		emitter.vel = owner.vel;
	}

	void Light(bool on) {
		if (!on) { emitter.Deactivate(self); return; }
		emitter.Activate(self); // turn on dynlight

		// Draw flashlight particle beam
		int start = 1; //particle beam starts at emitter
		if(owner.CheckLocalView()) { start = 12; } // unless local player
		for (double d = start; d < 64; d = d + (d / 2)) {
			emitter.A_SpawnParticle("White", SPF_FULLBRIGHT|SPF_RELANG,
				1, (sin(20) * d * 8), 0,
				cos(emitter.pitch) * cos(emitter.angle) * (d),
				cos(emitter.pitch) * sin(emitter.angle) * (d),
				sin(-emitter.pitch) * (d),
				owner.vel.x, owner.vel.y, owner.vel.z,
				0, 0, 0,
				(0.75) / (d ** 1.1), 0, 0);
		}
	}

	void Laser(bool on) {
		if (!on) { return; }

		// Draw laser particle beam
		FLineTraceData laserTrace;
		emitter.LineTrace(emitter.angle, 16384, emitter.pitch, TRF_THRUACTORS, data: laserTrace);
		for (double f = 1; f < laserTrace.distance; f = f + random[llm](0, 256)) {
			double bliplength = random[llm](8, 32);
			for (double d = f; d < f + bliplength; d = d + frandom[llm](0.1, 1.5)) {
				emitter.A_SpawnParticle("GREEN", SPF_FULLBRIGHT|SPF_RELANG,
					1, frandom[llm](0.75, 1.0) * clamp(d/4096, 0.75, 1), 0,
					cos(emitter.pitch) * cos(emitter.angle) * (d),
					cos(emitter.pitch) * sin(emitter.angle) * (d),
					sin(-emitter.pitch) * (d),
					owner.vel.x, owner.vel.y, owner.vel.z,
					0, 0, 0,
					frandom[llm](0.5, 0.9) * clamp(d/32, 0.0, 1), -1, 0);
			}
			f += bliplength;
		}
	}

	override int getsbarnum(int flags){ return mode; }

	override inventory CreateTossable(int amt) {
		if(emitter) { emitter.destroy(); }
		return super.CreateTossable(amt);
	}

	/*
	override void actualpickup(actor other) {
		super.actualpickup(other);
		UaS_Respirator pu = UaS_Respirator(other.findinventory("UaS_Respirator", false));
		pu.capacity = capacity;
	}*/
}

class UaS_LLM_Emitter : DynamicLight {
	default {
		DynamicLight.Type "Point";
		+DYNAMICLIGHT.ATTENUATE;
		+DYNAMICLIGHT.SPOT
	}

	override void PostBeginPlay() {
		super.PostBeginPlay();
		Deactivate(self);
		args[DynamicLight.LIGHT_RED] = 255;
		args[DynamicLight.LIGHT_GREEN] = 255;
		args[DynamicLight.LIGHT_BLUE] = 255;
		args[DynamicLight.LIGHT_INTENSITY] = 255;
		SpotInnerAngle = 15;
		SpotOuterAngle = 25;

	}
}
